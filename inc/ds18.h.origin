// Library for temperature sensor DS18B20
// Ver_1.0

/*========== LIBRARY DESCRIPTION ==========
- Library use STM32F3xx_HAL_Driver
*/
#ifndef DS18_H
#define DS18_H 1

#include "stdint.h"
#include "stm32f1xx_hal.h"
#include "stm32f1xx_hal_spi.h"
#include "onewire.h"


/**
  * @addtogroup ds18
  * @{
  */
#define DS18_CH_NUM 1
#define DS18_TIMEOUT 1000
#define DS18_9BIT 0x7F
#define DS18_10BIT 0x5F
#define DS18_11BIT 0x3F
#define DS18_12BIT 0x1F


#define DS18_RESOLUTION DS18_12BIT  //set resolution

/**
  * @}
  */

/*========== TYPEDEFS ==========*/

/**
  * @brief Struct for ds18b20 pins
  * @ingroup ds18
  */
typedef struct {
    GPIO_TypeDef *port;
    uint16_t pin;
}ds18_pin_t;

typedef struct{
    uint8_t 	Address[8];
    float 		Temperature;
    bool		data_validate;
}Ds18b20Sensor_t;

typedef enum {
    DS18B20_Resolution_9bits = 9,   /*!< DS18B20 9 bits resolution */
    DS18B20_Resolution_10bits = 10, /*!< DS18B20 10 bits resolution */
    DS18B20_Resolution_11bits = 11, /*!< DS18B20 11 bits resolution */
    DS18B20_Resolution_12bits = 12  /*!< DS18B20 12 bits resolution */
} DS18B20_Resolution_t;

//========== VARIABLES ==========

extern const ds18_pin_t ds18_pin[];
extern Ds18b20Sensor_t	ds18b20[];
extern uint8_t temp_sensor_count;
extern uint8_t data_valid;

/*========== FUNCTION PROTOTYPES ==========*/

int ds18_init (void);
void ds18_deinit(void);

#endif // DS18_H
